.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "SPEC4PHP" "5" "March 2011" "Ivan -DrSlump- Montes" "Spec for PHP "
.
.SH "NAME"
\fBspec4php\fR \- Spec files
.
.SH "SYNOPSIS"
A typical spec file:
.
.IP "" 4
.
.nf

<?php
describe "Calculator"
    it "should multiply"
        calculator(1, \'*\', 10) should equal 10
    end
    it "should divide"
        calculator(4, \'/\', 2) should equal 2
    end
end
.
.fi
.
.IP "" 0
.
.P
In this example we have grouped (\fBdescribe\fR) two tests (\fBit\fR) where each one has a single expectation (\fBshould\fR)\.
.
.SH "DESCRIPTION"
Spec files are normal PHP source code files with additional syntax to define \fBblocks\fR and \fBexpectations\fR\. By convention they should end in \fB\.spec\.php\fR or \fBSpec\.php\fR although this not a requirement\.
.
.P
The custom syntax for Spec can be made compatible with that of PHP by using dots "\." as a replacement for spaces\. This feature is mostly useful when you don\'t want your spec files to report errors in an IDE or when running the files thru a \fIlinting\fR procress\.
.
.P
In order to transform the custom Spec syntax to valid (and runnable) PHP source code you\'ll need to use the \fBcompiler\fR component of spec4php(3)\. The command line tool, spec4php(1), takes care of this process and will automatically transform the files\. By default, Spec will register a custom PHP stream wrapper with the prefix \fIspec://\fR which will apply the transformation to any file it references\.
.
.SH "BLOCKS"
These are the differnt blocks supported\. All of them are to be terminated with the \fBend\fR keyword\.
.
.TP
\fBdescribe\fR "\fIdescription\fR"
This block allows to define a group of tests\. These blocks can be nested inside other \fBdescribe\fR blocks\. They can be think of as the equivalent of a PHPUnit suite\.
.
.TP
\fBit\fR "\fIdescription\fR"
This is basically a test case\. These blocks MUST appear inside \fBdescribe\fR blocks\. Inside \fBit\fR blocks you should include your test logic an apply expectations over it\. This is the equivalent to a PHPUnit test case method\.
.
.TP
\fBbefore\fR
This block MUST appear inside a \fBdescribe\fR one\. It\'s used to setup the \fIworld\fR for the tests contained in the parent \fBdescribe\fR block\.
.
.TP
\fBafter\fR
This block MUST appear inside a \fBdescribe\fR one\. It\'s used to restore or clean up the \fIworld\fR after all the tests contained in the parent \fBdescribe\fR block have been run\.
.
.TP
\fBbefore_each\fR
Almost the same as the \fBbefore\fR block but this one is run just before every test (\fBit\fR block)\.
.
.TP
\fBafter_each\fR
Almost the same as the \fBafter\fR block but this one is run just after every test (\fBit\fR block)\.
.
.P
Note that \fBbefore\fR, \fBafter\fR, \fBbefore_each\fR and \fBafter_each\fR are inherited in nested \fBdescribe\fR groups\.
.
.SH "EXPECTATIONS"
Expectations are defined in Spec by using a subject\-predicate form that mimics english natural language\. Basically they take the form "\fBsubject\fR \fIshould\fR \fBpredicate\fR" where \fBsubject\fR is a PHP expression and \fBpredicate\fR defines matchers and expected values\.
.
.P
Any PHP expressions can be used before \fIshould\fR, however some are not completely supported, for example, it\'s not possible to use annonymous functions as the expectation \fBsubject\fR\. To improve readability and ensure the parser works as expected is useful to wrap them in parenthesis\.
.
.P
Matchers in the \fBpredicate\fR part can have an expected value, any simple PHP expression following the matcher phrase idents will be used as an argument to the matcher function\.
.
.P
Expectations do not need to be ended with a semicolon character (\';\') when the next word is the \fBend\fR keyword or there is an empty line below it\.
.
.P
In some cases it makes sense to use comparison symbols instead of writing it as text\. See the following table for the mapping between the comparison symbols and their matchers\.
.
.IP "" 4
.
.nf

   Symbol     |     Matcher
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
    ===       |    same
    !==       |    not same
    ==        |    equal
    !=        |    not equal
    >         |    greater
    <         |    less
    >=        |    at least
    <=        |    at most
.
.fi
.
.IP "" 0
.
.P
See the following examples of expectations:
.
.IP "" 4
.
.nf

$result should be integer;
(1+1) should equal 2;
trim("  foo ") should be exactly "foo";
count(array(1,2,3)) should >= 2;
$result should equal (1/2 + 5);
1 should != 2;
.
.fi
.
.IP "" 0
.
.SH "COORDINATION"
Complex expectations can be \fIcoordinated\fR by using operators \fBand\fR, \fBor\fR and \fBbut\fR\. It\'s important to understand the operator precedence rules before using them, although they try to follow common conventions for the english language there might be cases where they don\'t quite do what they look like\.
.
.P
All operators are left\-associative and take two operands, thus the precedence rules are very simple:
.
.IP "" 4
.
.nf

  operator  |  precedence index
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
    and     |        3
    or      |        2
    but     |        1
    ,and    |        1
.
.fi
.
.IP "" 0
.
.P
Please note that it\'s not possible to override the standard precedence rules by using parentheses\. Expectations should be kept simple, when in doubt break up complex expectations into simpler ones\.
.
.P
Please review the following examples to see how these precedence rules apply\.
.
.IP "" 4
.
.nf

should be integer or string and equal "1"
(integer) OR (string AND equal "1")

\-\- Note that a comma followed by an operand behaves like an "or"
should be integer, float or string
(integer) OR (float) OR (string)
should be integer, string and equal to 10 or float
(integer) OR (string AND equal 10) OR (float)

\-\- Note that a comma followed by "and" behaves like a "but"
should be integer or string but less than 10
should be integer or string, and less than 10
(integer OR string) AND (less than 10)

should be integer or string and equal 0 or float
(integer) OR (string AND equal 0) OR (float)

should be integer or string and equal "1" but not be a float
( (integer) OR (string AND equal "1") ) AND (not be float)
.
.fi
.
.IP "" 0
.
.SH "ANNOTATIONS"
Annotations can be defined in two ways, using the standard javadoc like comment with \fB@tag\fR entries or a more lightweight alternative using a hash line comment followed by a word: \fB# tag\fR\.
.
.P
Most annotations are inherited by child \fBdescribe\fR groups and \fBit\fR blocks\. In the case where there is a collision the deepest one in the hierarchy wins\.
.
.P
Spec understands the following annotation tags:
.
.TP
\fBclass\fR \fIclass_name\fR
Tells Spec to create a test case inherting from the given class\. This is very useful to allow the use of Spec with custom TestCase classes you might already have or for enabling the use of Zend_Test or PHPUnit\'s Selenium test case implementation\.
.
.TP
\fBthrows\fR [\fIcode\fR] \fIclass\fR [\fImessage\fR]
This annotation instructs Spec to perform an additional assertion when runnning the test, ensuring that it should throw an exception matching the given code or the given exception class\.
.
.TP
\fBtodo\fR, \fBincomplete\fR
Flags a test case as incomplete\. Spec will report these test cases in a different way to standard ones, so it\'s easy to know when a test is passing but doesn\'t yet tests all the funcionality it should\.
.
.TP
\fBskip\fR
A test case with this tag will make Spec skip its execution but log in the report that it was skipped\. It\'s a great way to disable some test cases known to fail for any reason\.
.
.P
Additionally, most PHPUnit annotations should work when using spec files too, see  \fIhttp://www\.phpunit\.de/manual/current/en/appendixes\.annotations\.html\fR
.
.SH "CUSTOM TEST CLASSES"
It\'s possible to use custom test case classes that extend the \fBPHPUnit_Framework_TestCase\fR one\. They can be implemented by you or come from a framework, like the ones from Zend_Test\.
.
.P
Spec is able to \fIpatch\fR any given class to add support for its features, so it\'s completely possible to use those classes without having to modify them in any way\.
.
.P
The way to tell Spec what class it should use is by definning an annotation for a \fBdescribe\fR or \fBit\fR block, like in the following example:
.
.IP "" 4
.
.nf

# class Zend_Test_PHPUnit_ControllerTestCase
describe "Calculator"
  it "should multiply"
    (1*3) should equal 3;
  end

  // @class PHPUnit_Framework_TestCase
  it "should divide"
    (3/1) should equal 3;
  end
end
.
.fi
.
.IP "" 0
.
.P
Note that this annotation is inherited by child blocks, so there is no need to specify it for each test\.
.
.SH "EXAMPLES"
.
.SH "COPYRIGHT"
Spec for PHP is Copyright (C) 2011 Ivan \-DrSlump\- Montes \fIhttp://pollinimini\.net\fR
.
.SH "SEE ALSO"
spec4php(1), spec4php(3), \fIhttp://github\.com/drslump/spec\-php\fR
